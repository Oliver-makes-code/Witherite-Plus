plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id 'dev.architectury.loom' version '0.10.0-SNAPSHOT' apply false
    id "org.quiltmc.quilt-mappings-on-loom" version "4.0.0"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

architectury {
    minecraft = rootProject.minecraft_version
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

version = project.mod_version
group = project.maven_group


subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "org.quiltmc.quilt-mappings-on-loom"

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings(loom.layered {
            addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:v2"))
        })
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        mavenCentral()
        maven { url = "https://maven.quiltmc.org/repository/snapshot" }
        maven { url = "https://maven.quiltmc.org/repository/release" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    java {
        withSourcesJar()
    }

    jar {
        from "lisence"
    }
}

dependencies {

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

sourcesJar {
    def common = project(":common").sourcesJar
    dependsOn common
    from common.archiveFile.map { zipTree(it) }
    def fabric = project(":fabric").sourcesJar
    dependsOn fabric
    from fabric.archiveFile.map { zipTree(it) }
    def forge = project(":forge").sourcesJar
    dependsOn forge
    from forge.archiveFile.map { zipTree(it) }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

jar {
    def common = project(":common").jar
    dependsOn common
    from common.archiveFile.map { zipTree(it) }
    def fabric = project(":fabric").jar
    dependsOn fabric
    from fabric.archiveFile.map { zipTree(it) }
    def forge = project(":forge").jar
    dependsOn forge
    from forge.archiveFile.map { zipTree(it) }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}